#!/usr/bin/env python3
"""
Complete demo of the libcst backend integration for PaConvert.
This script demonstrates the new backend functionality including:
- Backend selection via command line
- Comment preservation with libcst
- Formatting preservation with libcst
- Backward compatibility with astor
"""

import sys
import os
import tempfile
import shutil

# Add paconvert to path
sys.path.insert(0, os.path.dirname(__file__))

def create_sample_pytorch_code():
    """Create sample PyTorch code with comments and formatting."""
    return '''# PyTorch Model Example
import torch
import torch.nn as nn
import torch.optim as optim

# Define a simple neural network
class SimpleNet(nn.Module):
    """A simple feedforward neural network."""
    
    def __init__(self, input_size=784, hidden_size=128, num_classes=10):
        super(SimpleNet, self).__init__()
        
        # Define layers with different formatting styles
        self.fc1=nn.Linear(input_size,hidden_size)  # First layer
        self.fc2 = nn.Linear( hidden_size , num_classes )  # Output layer
        
        # Activation function
        self.relu = nn.ReLU()
        self.dropout = nn.Dropout(0.2)  # Regularization
    
    def forward(self, x):
        # Forward pass with comments
        x = x.view(x.size(0), -1)  # Flatten input
        
        x=self.fc1(x)  # Apply first layer
        x = self.relu( x )  # Apply activation
        x = self.dropout(x)  # Apply dropout
        
        x=self.fc2(x)  # Apply output layer
        return x  # Return logits

# Training setup
def train_model():
    """Train the model with various PyTorch operations."""
    
    # Create model and optimizer
    model=SimpleNet()  # Initialize model
    optimizer = optim.Adam( model.parameters() , lr=0.001 )  # Adam optimizer
    criterion=nn.CrossEntropyLoss()  # Loss function
    
    # Sample training loop
    for epoch in range(10):  # Training epochs
        # Generate dummy data
        inputs = torch.randn(32, 784)  # Batch of inputs
        targets=torch.randint(0,10,(32,))  # Random targets
        
        # Forward pass
        outputs=model(inputs)  # Get predictions
        loss = criterion( outputs , targets )  # Calculate loss
        
        # Backward pass
        optimizer.zero_grad()  # Clear gradients
        loss.backward()  # Backpropagation
        optimizer.step()  # Update weights
        
        # Print progress
        if epoch % 5 == 0:  # Every 5 epochs
            print(f"Epoch {epoch}, Loss: {loss.item():.4f}")  # Progress info

# Main execution
if __name__ == "__main__":
    train_model()  # Run training
'''

def demo_backend_comparison():
    """Demonstrate the difference between astor and libcst backends."""
    print("=== PaConvert Backend Integration Complete Demo ===\n")
    
    # Create sample code
    sample_code = create_sample_pytorch_code()
    print("1. Sample PyTorch code created with comments and various formatting styles")
    print(f"   - Code length: {len(sample_code)} characters")
    print(f"   - Number of comments: {sample_code.count('#')} comments")
    print(f"   - Number of lines: {len(sample_code.splitlines())} lines")
    
    # Test backend manager
    print("\n2. Testing Backend Manager:")
    try:
        from paconvert.backend.manager import BackendManager
        
        print(f"   ‚úì Available backends: {BackendManager.get_valid_backends()}")
        
        # Test astor backend
        print("\n3. Testing Astor Backend:")
        astor_manager = BackendManager("astor")
        print(f"   ‚úì Created backend: {astor_manager.get_backend_name()}")
        
        astor_tree = astor_manager.parse_code(sample_code)
        astor_output = astor_manager.generate_code(astor_tree)
        
        print(f"   ‚úì Processed code successfully")
        print(f"   - Output length: {len(astor_output)} characters")
        print(f"   - Comments in output: {astor_output.count('#')} comments")
        print(f"   - Lines in output: {len(astor_output.splitlines())} lines")
        
        # Test libcst backend
        print("\n4. Testing LibCST Backend:")
        try:
            libcst_manager = BackendManager("libcst")
            print(f"   ‚úì Created backend: {libcst_manager.get_backend_name()}")
            
            if libcst_manager.is_fallback_used():
                print(f"   ‚ö† Fallback used: requested libcst, got {libcst_manager.get_backend_name()}")
            else:
                libcst_tree = libcst_manager.parse_code(sample_code)
                libcst_output = libcst_manager.generate_code(libcst_tree)
                
                print(f"   ‚úì Processed code successfully")
                print(f"   - Output length: {len(libcst_output)} characters")
                print(f"   - Comments in output: {libcst_output.count('#')} comments")
                print(f"   - Lines in output: {len(libcst_output.splitlines())} lines")
                
                # Compare preservation
                print("\n5. Preservation Comparison:")
                if len(libcst_output) == len(sample_code):
                    print("   ‚úì LibCST preserved exact formatting!")
                else:
                    print(f"   ‚ö† LibCST formatting differs (expected with bridge implementation)")
                
                if libcst_output.count('#') >= astor_output.count('#'):
                    print("   ‚úì LibCST preserved more comments than astor!")
                else:
                    print("   ‚ö† LibCST comment preservation needs improvement")
        
        except Exception as e:
            print(f"   ‚ö† LibCST backend error: {e}")
        
        # Test converter integration
        print("\n6. Testing Converter Integration:")
        from paconvert.converter import Converter
        
        # Test with temporary files
        with tempfile.TemporaryDirectory() as temp_dir:
            input_dir = os.path.join(temp_dir, "input")
            output_dir = os.path.join(temp_dir, "output")
            os.makedirs(input_dir)
            
            # Create test file
            test_file = os.path.join(input_dir, "model.py")
            with open(test_file, "w", encoding="utf-8") as f:
                f.write(sample_code)
            
            # Test with astor backend
            print("   Testing with astor backend:")
            converter_astor = Converter(log_dir="disable", backend="astor")
            success, failed = converter_astor.run(input_dir, output_dir + "_astor")
            print(f"   ‚úì Astor conversion: {success} success, {failed} failed")
            
            # Test with libcst backend
            print("   Testing with libcst backend:")
            converter_libcst = Converter(log_dir="disable", backend="libcst")
            success, failed = converter_libcst.run(input_dir, output_dir + "_libcst")
            print(f"   ‚úì LibCST conversion: {success} success, {failed} failed")
        
        print("\n7. Command Line Usage Examples:")
        print("   # Default astor backend (backward compatible):")
        print("   paconvert -i pytorch_project/ -o paddle_project/")
        print("")
        print("   # Explicit astor backend:")
        print("   paconvert -i pytorch_project/ -o paddle_project/ --backend astor")
        print("")
        print("   # LibCST backend for comment/formatting preservation:")
        print("   paconvert -i pytorch_project/ -o paddle_project/ --backend libcst")
        print("")
        print("   # Help with backend options:")
        print("   paconvert --help")
        
        print("\n8. Implementation Status:")
        print("   ‚úì Backend abstraction layer implemented")
        print("   ‚úì Command-line parameter support added")
        print("   ‚úì Astor backend wrapper implemented")
        print("   ‚úì LibCST backend with bridge implementation")
        print("   ‚úì Comment preservation (basic implementation)")
        print("   ‚úì Formatting preservation (basic implementation)")
        print("   ‚úì Error handling and fallback logic")
        print("   ‚úì Backward compatibility maintained")
        
        print("\n9. Next Steps for Full Implementation:")
        print("   - Implement native libcst transformers (replace bridge)")
        print("   - Improve comment preservation heuristics")
        print("   - Add comprehensive test suite")
        print("   - Performance optimization")
        print("   - Documentation updates")
        
        print("\n=== Demo Complete ===")
        print("üéâ Backend integration is working! Users can now choose between")
        print("   astor (fast, reformats code) and libcst (preserves comments/formatting)")
        
    except Exception as e:
        print(f"‚ùå Demo failed: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    demo_backend_comparison()